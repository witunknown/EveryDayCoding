1.Uninon 跟uninon all 的区别
    uninon all 多个查询结果拼接；uninon all结果不会去重；uninon 结果去重

2.Hive 的开窗函数 rank() 和row_number()的区别？
       rank()中的排名：1,2,2,4 row_number():1,2,3,4

3. distribute by 、sort by 、cluster by 、order by 区别？
    order by:一个reduce进行排序，全局排序；
    sort by:sort by 只能保证每个reduce有序，不能保证全局有序；
    distribute by:分桶；
    cluster by=distribute by+sort by

4.join的使用:left join，right join,full join;
    left join以左边为匹配

5. sql的执行顺序

6.count(distinct)和group by 之后在count的区别？
   count(distinct) 只有一个reduce在执行；原理：需要distinct的数据发放一个reduce,reduce使用hashSet去重
   group by则会在map端先去重,且会产生多个job;

7.Hive中的外部表和内部表的区别：
    1.创建内部表的时候，会将数据移动到数据仓库指向的路径，创建外部表的时候，仅记录数据所在的位置，不对数据做任何的该表；
    2.删除外部表的时候，只是删除元数据，不会删除数据，删除内部表的时候，元数据和数据都会被删除。

8.map端join: small_table a left join big_table b
           在task中：small_table 转换成hashTable本地写文件，然后加载进分布式内存；big_table 大表加载，然后Map端直接在hashTable中匹配输出文件

9.map端聚合：

10.一般优化思路：
    1.	map数量的控制：合并和拆分小文件；
    2.	reduce数量控制：调整每个reduce数据的大小；直接设置reduce的数量；（reduce过多，小文件过多；reduce过少，数据处理慢，甚至OOM）;
    3.	设置小文件合并参数：
    hive.merge.mapfiles=true
    hive.merge.mapredfiles=false
    hive.merge.size.per.task=256*1000*1000
    2.	Hive SQL优化；
    1.	列裁决；
    2.	分区裁剪；
    3.	MapSide Join（小表join大表）;分桶
    3.GroupBY：map端聚合；数据倾斜时负载均衡（hive.groupby.skewindata = true）；
    4.分桶：cluster By; distribute by + sort by: 分桶;order by；
    5.存储ORC格式；Parquet格式,列式存储
11. hive支持的文件格式：
    1.textFile:行存储；磁盘开销大，解析困难，压缩无法合并；
    2.sequencefile:二进制文件；kv形式序列化；可分割，压缩；和MR比较契合；
    3.orc:列存储，列按行分块；压缩快